
@{
    ViewData["Title"] = "Group";
    Layout = "MainLayout";
     var tasks = ViewData["Tasks"] as List<TaskModel>;
}
@model ProjectMilestoneAndProjectMemberView_GroupModel
<style>
    #progressContainer {
        max-height: 500px; /* Chiều cao tối đa phù hợp với nội dung */
        overflow: hidden;
        transition: max-height 0.5s ease, opacity 0.5s ease;
        opacity: 1;
    }

        #progressContainer:not(.active) {
            max-height: 0;
            opacity: 0;
        }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }
</style>

@* @if (TempData["Message"] != null)
{
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <!-- Toast container positioned at the top-right -->
        <div class="toast-container position-fixed top-10 end-0 p-2" style="z-index: 1050;">
            <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="7000">
                <div class="toast-header">
                    <i class="bi bi-bell-fill rounded me-2" style="color: yellow; font-size: 1.5rem;"></i>
                    <strong class="me-auto">Thông báo</strong>
                    <small class="text-muted">Vừa xong</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Đóng"></button>
                </div>
                <div class="toast-body" id="toastMessage">
                    @TempData["Message"]
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toastEl = document.querySelector('.toast');
            var toast = new bootstrap.Toast(toastEl);
            toast.show();
        });
    </script>
} *@
<div aria-live="polite" aria-atomic="true" class="position-relative">
    <!-- Toast container positioned at the top-right -->
    <div class="toast-container position-fixed top-10 end-0 p-2" style="z-index: 1050;">
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="7000">
            <div class="toast-header">
                <i class="bi bi-bell-fill rounded me-2" style="color: yellow; font-size: 1.5rem;"></i>
                <strong class="me-auto">Thông báo</strong>
                <small class="text-muted">Vừa xong</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Đóng"></button>
            </div>
            <div class="toast-body" id="toastMessage">
            </div>
        </div>
    </div>
</div>

<div class="container bg-white rounded mt-4 p-4 shadow-lg">
    <div class="d-flex justify-content-between align-items-start">
        <!-- Left Section: Class info and Instructor -->
        <div class="flex-grow-1">
            <h2 class="text-primary fw-bold mb-1">
                @ViewBag.ClassName <small class="text-muted">- Lớp: @ViewBag.SubjectCode</small>
            </h2>
            <h5 class="text-secondary">
                Giảng Viên: <span class="fw-semibold">@ViewBag.InstructorFullName</span>
            </h5>
            @if (Model != null)
            {
                <p class="text-muted mb-0">
                    <strong>Đề tài:</strong> @Model.projectInfo.ProjectName | <strong>Nhóm:</strong> @Model.projectInfo.GroupNumber
                </p>
            }
        </div>

        <!-- Right Section: Action Buttons and Dropdown -->
        <div class="d-flex align-items-center" style="margin-top:30px;">
            <!-- Dropdown menu -->
            <div class="me-3">
                <button class="btn btn-outline-info dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-list"></i> Danh mục
                </button>
                <ul class="dropdown-menu shadow-sm">
                    <li class="dropdown-header fw-bold text-primary">Nhiệm vụ</li>
                    <li><a class="dropdown-item" href="#" onclick="loadContent('ListTask', 'Danh sách nhiệm vụ')">Danh sách nhiệm vụ</a></li>
                    <li><a class="dropdown-item" href="#" onclick="loadContent('ListTaskRecived', 'Danh sách nhiệm vụ đã nhận')">Danh sách nhiệm vụ đã nhận</a></li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-header fw-bold text-primary">Tiến độ & Báo cáo</li>
                    <li><a class="dropdown-item" href="#" onclick="loadContent('Progress', 'Tiến độ')">Tiến độ</a></li>
                    @if (Context.Session.GetString("leader") == "IsLeader")
                    {
                        <li><a class="dropdown-item" href="#" onclick="loadContent('Report', 'Báo cáo tiến độ')">Báo cáo tiến độ</a></li>
                        <li><a class="dropdown-item" href="#" onclick="loadContent('FinalReport', 'Báo cáo hoàn thiện')">Báo cáo hoàn thiện</a></li>
                    }
                </ul>
            </div>


            @if (Context.Session.GetString("leader") == "IsLeader")
            {
                <!-- Leader-specific Buttons -->
                <a href="@Url.Action("CreateProgressPlan", "Groups", new { projectId = Model.projectInfo.ProjectId })" class="btn btn-outline-primary me-2">
                    <i class="bi bi-calendar-check"></i> Lập Kế Hoạch
                </a>
                

                @if (ViewBag.dontCreateTask == true)
                {
                    <a href="javascript:void(0);" class="btn btn-outline-success me-3" data-bs-toggle="popover" title="Thông báo" data-bs-content="Bạn cần lập kế hoạch và tạo ít nhất 1 giai đoạn để có thể tạo nhiệm vụ" disabled>
                        <i class="bi bi-plus-circle"></i> Tạo nhiệm vụ
                    </a>
                }
                else
                {
                    <a href="@Url.Action("CreateTaskView", "Groups", new { projectId = Model.projectInfo.ProjectId })" class="btn btn-outline-success me-3">
                        <i class="bi bi-plus-circle"></i> Tạo nhiệm vụ
                    </a>
                }


            }
            <a href="@Url.Action("SendEmail", "Groups")" class="btn btn-outline-success" style="margin-right:10px">
                <i class="bi bi-envelope-arrow-up-fill"></i>
            </a>
            <!-- Progress Button (this will now be on the same line) -->
            <button id="toggleProgressBtn" class="btn btn-danger">
                <i class="bi bi-arrow-up-right-circle"></i>
            </button>
        </div>

    </div>

</div>

@{
    var sortedPhases = ((List<ProjectPhaseViewModel>)ViewBag.Phases)
                       .OrderBy(phase => phase.StartDate)
                       .ToList();
}

<div id="progressContainer" class="mt-4">
    <!-- Kế hoạch tiến độ -->
    @if (sortedPhases != null && sortedPhases.Any())
    {
        <h5 class="text-center text-primary fw-bold mb-4">
            <i class="bi bi-calendar-check"></i> Kế hoạch tiến độ
        </h5>

        <!-- Thanh tiến độ -->
        <div class="progress mb-4 active">
            @foreach (var phase in sortedPhases)
            {
                <div class="progress-bar text-dark fw-bold" role="progressbar"
                     style="width: @phase.Percentage%; background-color: @phase.BackgroundColor;"
                     aria-valuenow="@phase.Percentage"
                     aria-valuemin="0"
                     aria-valuemax="100">
                    @phase.Percentage% (@phase.TotalDays ngày)
                </div>
            }
        </div>

        <!-- Chú thích giai đoạn -->
        <div class="mt-3">
            <h6 class="fw-bold text-secondary">Chú thích các giai đoạn:</h6>
            <ul class="list-unstyled">
                @foreach (var phase in sortedPhases)
                {
                    <li class="mb-2">
                        <span class="badge"
                              style="background-color: @phase.BackgroundColor; width: 20px; height: 20px; display: inline-block; border-radius: 3px; margin-right: 10px;"></span>
                        <strong>@phase.StageName</strong>:
                        <span class="text-muted">Từ: @phase.StartDate.ToString("dd/MM/yyyy") - Đến: @phase.EndDate.ToString("dd/MM/yyyy")</span>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <p class="text-muted text-center">Nhóm trưởng chưa xét tiến độ.</p>
    }
@if (Model.projectMilestone != null && Model.projectMilestone.Any())
{
    @if (Context.Session.GetString("leader") == "IsLeader")
    {
        <div class="card p-4 mb-4">
            <h5 class="text-center text-primary fw-bold mb-4">
                <i class="bi bi-list-task"></i> Danh sách các giai đoạn
            </h5>

            <div class="table-responsive">
                <table id="phaseTable" class="table table-striped table-hover">
                    <thead class="table-info">
                        <tr>
                            <th>#</th>
                            <th>Tên giai đoạn</th>
                            <th>Ngày bắt đầu</th>
                            <th>Ngày kết thúc</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.projectMilestone.Count; i++)
                        {
                            var item = Model.projectMilestone[i];
                            <tr id="phaseRow-@item.MilestoneId" class="phaseRow-@item.MilestoneId">
                                <td>@(i + 1)</td>
                                <td>@item.StageName</td>
                                <td>@item.StartDate.ToString("dd/MM/yyyy")</td>
                                <td>@item.EndDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <!-- Nút sửa -->
                                    <button class="btn btn-warning btn-sm" data-bs-toggle="modal"
                                            data-bs-target="#editPhaseModal"
                                            onclick="setModalValues('@item.MilestoneId', '@item.StageName', '@item.StartDate.ToString("yyyy-MM-dd")', '@item.EndDate.ToString("yyyy-MM-dd")')">
                                        Sửa
                                    </button>

                                    <!-- Nút xóa -->
                                    <button type="button" class="btn btn-danger btn-sm"
                                            onclick="confirmDeletion(@item.MilestoneId, '@item.StageName')">
                                        Xóa
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}
else
{
    <p class="text-muted text-center">Chưa có giai đoạn nào trong dự án này.</p>
}

<!-- Modal duy nhất cho tất cả các giai đoạn -->
<div class="modal fade" id="editPhaseModal" tabindex="-1" aria-labelledby="editPhaseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editPhaseModalLabel">
                    Chỉnh sửa giai đoạn
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="phaseId" />
                <div class="mb-3">
                    <label class="form-label">Tên giai đoạn</label>
                    <input type="text" class="form-control" id="StageName" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Ngày bắt đầu</label>
                    <input type="date" class="form-control" id="StartDate" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Ngày kết thúc</label>
                    <input type="date" class="form-control" id="EndDate" required />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    Hủy
                </button>
                <button type="button" class="btn btn-primary" id="savePhaseBtn">Lưu</button>
            </div>
        </div>
    </div>
</div>


</div>
 <!-- Modal chỉnh sửa -->
<div class="chatbot chatbot--closed" id="chatbot" style="z-index:9999; margin-bottom: 80px;margin-right: -74px;">
    <div class="chatbot__header">
        <i class="bi bi-x-circle" style="cursor: pointer; color:black; margin-left: 728px; padding: 14px;" id="chatbotCloseButton"></i> <!-- Icon close -->
    </div>
    <div class="chatbot__message-window">
        <ul class="chatbot__messages">
            <li class="is-ai animation">
                <div class="is-ai__profile-picture">
                    <svg class="icon-avatar" viewBox="0 0 32 32">
                        <use xlink:href="#avatar" />
                    </svg>
                </div>
                <span class="chatbot__arrow chatbot__arrow--left"></span>
                <p class='chatbot__message'>Chào bạn 🖐. Tôi là Mít tơ chép, bạn có muốn tôi phân tích dữ liệu nhóm này không?</p>
            </li>
        </ul>
    </div>
    <div class="chatbot__entry">
        <input type="text" id="chatbot__input" class="chatbot__input" placeholder="Write a message..." disabled />
        <svg class="chatbot__submit" viewBox="0 0 32 32">
            <use xlink:href="#icon-send" />
        </svg>
    </div>
</div>


<button class="chatbot-toggle" id="chatbotToggle"><i class="bi bi-chat-left-dots"></i></button>

<svg>
    <!-- Close icon -->
    <symbol id="icon-close" viewBox="0 0 32 32">
        <title>Close</title>
        <path d="M2.624 8.297l2.963-2.963 23.704 23.704-2.963 2.963-23.704-23.704z" />
        <path d="M2.624 29.037l23.704-23.704 2.963 2.963-23.704 23.704-2.963-2.963z" />
    </symbol>

    <!-- Speech icon -->
    <symbol id="icon-speech" viewBox="0 0 32 32">
        <title>Speech</title>
        <path d="M21.795 5.333h-11.413c-0.038 0-0.077 0-0.114 0l-0.134 0.011v2.796c0.143-0.006 0.273-0.009 0.385-0.009h11.277c0.070 0 7.074 0.213 7.074 7.695 0 5.179-2.956 7.695-9.036 7.695h-3.792c-0.691 0-1.12 0.526-1.38 1.159l-1.387 3.093-1.625 3.77 0.245 0.453h2.56l2.538-5.678h2.837c7.633 0 11.84-3.727 11.84-10.494 0.001-8.564-7.313-10.492-9.875-10.492z" />
        <path d="M10.912 24.259c-0.242-0.442-0.703-0.737-1.234-0.737-0 0-0 0-0 0h-0.56c-0.599-0.011-1.171-0.108-1.71-0.28l0.042 0.012c-1.82-0.559-4.427-2.26-4.427-7.424 0-6.683 5.024-7.597 7.109-7.686v-2.8c-2.042 0.095-9.91 1.067-9.91 10.483 0 4.832 1.961 7.367 3.606 8.64 1.38 1.067 3.109 1.744 4.991 1.843l0.033 0.019 2.805 5.211 1.41-3.273z" />
    </symbol>

    <!-- Send icon -->
    <symbol id="icon-send" viewBox="0 0 23.97 21.9">
        <title>Send</title>
        <path d="M0.31,9.43a0.5,0.5,0,0,0,0,.93l8.3,3.23L23.15,0Z" />
        <path d="M9,14.6H9V21.4a0.5,0.5,0,0,0,.93.25L13.22,16l6,3.32A0.5,0.5,0,0,0,20,19l4-18.4Z" />
    </symbol>

    <!-- Avatar icon -->
    <symbol id="avatar" width="32" height="32" viewBox="0 0 44.25 44">
        <title>Avatar</title>
        <path style="fill: #7226e0; fill-rule: evenodd;" d="M1035.88,1696.25a22,22,0,1,1-22.13,22A22.065,22.065,0,0,1,1035.88,1696.25Z" transform="translate(-1013.75 -1696.25)" />
        <path style="fill: #fff; fill-rule: evenodd;" d="M1030.18,1725.16h2.35a0.335,0.335,0,0,0,.34-0.33v-5.23h5.94v5.23a0.342,0.342,0,0,0,.34.33h2.36a0.342,0.342,0,0,0,.34-0.33v-12.36a0.34,0.34,0,0,0-.34-0.32h-2.36a0.34,0.34,0,0,0-.34.32v4.51h-5.94v-4.51a0.333,0.333,0,0,0-.34-0.32h-2.35a0.333,0.333,0,0,0-.34.32v12.36a0.335,0.335,0,0,0,.34.33" transform="translate(-1013.75 -1696.25)" />
    </symbol>

</svg>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Thêm vào phần <head> trong _Layout.cshtml -->
    <script>
    // Khởi tạo popover khi trang tải
    document.addEventListener("DOMContentLoaded", function () {
        // Khởi tạo popover cho tất cả các phần tử có data-bs-toggle="popover"
        var popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');
        var popoverList = [...popoverTriggerList].map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'focus'  // Chỉ mở khi click vào, và sẽ đóng khi click ra ngoài
            });
        });
    });
</script>


    <script>
    function confirmDeletion(phaseId, phaseName) {
    Swal.fire({
        title: 'Bạn có chắc chắn?',
        text: `Bạn muốn xóa giai đoạn: ${phaseName}?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Xóa',
        cancelButtonText: 'Hủy'
    }).then((result) => {
        if (result.isConfirmed) {
            // Gửi yêu cầu Ajax để xóa giai đoạn
            $.ajax({
                url: '/Groups/DeletePhase', // Thay thế ControllerName bằng tên Controller của bạn
                type: 'POST',
                data: { id: phaseId },
                success: function (response) {
                    if (response.success) {
                        // Hiển thị toast thành công
                        showToast(response.message, true);
                        
                        // Xóa hàng trong bảng sau khi xóa thành công
                        $(`.phaseRow-${phaseId}`).remove();
                    } else {
                        // Hiển thị thông báo lỗi
                        Swal.fire('Lỗi!', response.message, 'error');
                    }
                },
                error: function () {
                    // Hiển thị thông báo lỗi nếu có lỗi trong quá trình gọi API
                    Swal.fire('Lỗi!', 'Đã xảy ra lỗi khi xóa giai đoạn.', 'error');
                }
            });
        }
    });
}

function setModalValues(phaseId, stageName, startDate, endDate) {
    // Cập nhật giá trị vào các trường trong modal
    $("#phaseId").val(phaseId);
    $("#StageName").val(stageName);
    $("#StartDate").val(startDate);
    $("#EndDate").val(endDate);
}

$(document).ready(function () {
    // Bắt sự kiện click nút "Lưu" trong modal
    $("#savePhaseBtn").on("click", function () {
        var phaseId = $("#phaseId").val();
        var stageName = $("#StageName").val();
        var startDate = $("#StartDate").val();
        var endDate = $("#EndDate").val();

        // Gửi yêu cầu Ajax
        $.ajax({
            url: '/Groups/EditPhase',  // Thay 'ControllerName' bằng tên controller của bạn
            type: 'POST',
            data: {
                MilestoneId: phaseId,
                StageName: stageName,
                StartDate: startDate,
                EndDate: endDate
            },
            success: function (response) {
                if (response.success) {
                    // Hiển thị toast thành công
                    showToast(response.message, true);

                    // Đóng modal
                    $('#editPhaseModal').modal('hide');

                    // Cập nhật lại thông tin giai đoạn trên bảng
                    updatePhaseRow(phaseId, stageName, startDate, endDate);
                } else {
                    // Hiển thị thông báo lỗi
                    showToast(response.message, false);
                }
            },
            error: function () {
                // Thông báo lỗi khi có sự cố với Ajax
                showToast("Đã xảy ra lỗi khi cập nhật giai đoạn.", false);
            }
        });
    });

    // Hàm hiển thị toast thông báo
    function showToast(message, isSuccess) {
        let toastType = isSuccess ? 'success' : 'error';
        toastr[toastType](message);
    }

    // Hàm cập nhật thông tin giai đoạn sau khi sửa
    function updatePhaseRow(phaseId, stageName, startDate, endDate) {
        var row = $("#phaseRow-" + phaseId);
        row.find("td").eq(1).text(stageName); // Cập nhật Tên giai đoạn
        row.find("td").eq(2).text(startDate); // Cập nhật Ngày bắt đầu
        row.find("td").eq(3).text(endDate);   // Cập nhật Ngày kết thúc
    }
});






    function togglePlanVisibility() {
        const planContainer = document.getElementById('progressContainer');
        const button = document.getElementById('toggleProgressBtn');

        if (planContainer.classList.contains('active')) {
            planContainer.classList.remove('active');
            button.innerHTML = '<i class="bi bi-arrow-up-right-circle"></i>';
        } else {
            planContainer.classList.add('active');
            button.innerHTML = '<i class="bi bi-arrow-down-circle"></i>';
        }
    }

    document.getElementById('toggleProgressBtn').addEventListener('click', togglePlanVisibility);



</script>


<div id="contentArea" class="mt-4 p-4 border rounded">

</div>


    <script>

        function loadContent(menuAction, menuName) {
            const contentArea = document.getElementById('contentArea');

        // Hiển thị tên của tùy chọn đã chọn
        contentArea.innerHTML = `<h4>${menuName}</h4><div>Đang tải nội dung...</div>`;

        // Gửi yêu cầu AJAX để tải nội dung chi tiết
        $.ajax({
            url: '@Url.Action("GetContent", "Groups")', // Đường dẫn tới Controller
        type: 'GET',
        data: {menuAction: menuAction }, // Truyền menuAction
        success: function (response) {
                $('#contentArea').html(`<h4 class="text-center text-success fw-bold mb-4">${menuName}</h4>${response}`); // Hiển thị nội dung
                },
        error: function () {
            contentArea.innerHTML = `<h4>${menuName}</h4><div class="text-danger">Lỗi khi tải dữ liệu. Vui lòng thử lại.</div>`;
                }
            });
        }

    function updateTaskButtons() {
        $('.task-card').each(function () {
            var status = $(this).data('status');  // Trạng thái nhiệm vụ
            var taskId = $(this).data('task-id');  // ID nhiệm vụ

            if (status === 'Đã nhận') {
                // Vô hiệu hóa nút và thay đổi văn bản
                $('#acceptTaskButton-' + taskId).prop('disabled', true);
                $('#acceptTaskButton-' + taskId).text('Đã nhận nhiệm vụ');
            }
        });
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>


    <script>
    let isChatbotOpenedOnce = false;  // Cờ để kiểm tra lần đầu tiên mở chatbot
    // Lắng nghe sự kiện click vào biểu tượng đóng (x)
    document.getElementById('chatbotCloseButton').addEventListener('click', function () {
        const chatbot = document.getElementById('chatbot');
        // Ẩn chatbot khi nhấn vào nút đóng
        chatbot.classList.toggle('chatbot--closed');
        chatbot.classList.toggle('chatbot--open');
    });

    document.getElementById('chatbotToggle').addEventListener('click', function () {
        const chatbot = document.getElementById('chatbot');
        chatbot.classList.toggle('chatbot--closed');
        chatbot.classList.toggle('chatbot--open');

        // Kiểm tra nếu chatbot được mở lần đầu tiên
        if (!isChatbotOpenedOnce) {
            isChatbotOpenedOnce = true; // Đánh dấu chatbot đã mở lần đầu tiên
            showAnalysisButton();  // Hiển thị nút phân tích
        }
    });

    let userAnswers = ""; // Biến lưu trữ chuỗi các câu trả lời
    const $chatbot = document.querySelector('.chatbot');
    const $chatbotMessageWindow = document.querySelector('.chatbot__message-window');
    const $chatbotMessages = document.querySelector('.chatbot__messages');
    const $chatbotInput = document.querySelector('.chatbot__input');
    const $chatbotSubmit = document.querySelector('.chatbot__submit');

    // Hàm hiển thị loader
    const showLoader = () => {
        const loadingMessage = `<li class='is-ai animation' id='is-loading'>
                <div class="is-ai__profile-picture">
                    <svg class="icon-avatar" viewBox="0 0 32 32">
                        <use xlink: href="#avatar" />
                    </svg>
                </div>
                <span class='chatbot__arrow chatbot__arrow--left'></span>
                <div class='chatbot__message'>Đang xử lý...</div>
            </li>`;
        $chatbotMessages.innerHTML += loadingMessage;
        scrollDown();
    };

    const removeLoader = () => {
        let loadingElem = document.getElementById('is-loading');
        if (loadingElem) $chatbotMessages.removeChild(loadingElem);
    };
    // Hàm xử lý khi gửi tin nhắn
    const sendMessage = () => {
        const userMessage = $chatbotInput.value.trim();
        if (!userMessage) {
            return; // Không gửi nếu người dùng không nhập gì
        }

        // Gửi tin nhắn của người dùng lên giao diện
        userMessageToUI(userMessage);

        // Xóa nội dung trường nhập liệu
        $chatbotInput.value = '';
        console.log('userMessage', userMessage);
        // Gửi dữ liệu đến server
        sendAnswersToServer(userMessage);
    };

    // Hàm để hiển thị tin nhắn của người dùng trên giao diện
    const userMessageToUI = (message) => {
        const $messagesList = document.querySelector('.chatbot__messages');
        $chatbotMessages.innerHTML += `<li class='is-user animation'>
                  <p class='chatbot__message'>
                        ${message}
                  </p>
                  <span class='chatbot__arrow chatbot__arrow--right'></span>
                </li>`;
        // $messagesList.insertAdjacentHTML('beforeend', userMessageHTML);
        scrollDown(); // Cuộn xuống cuối màn hình
    };

    // Lắng nghe sự kiện click trên nút gửi
    $chatbotSubmit.addEventListener('click', sendMessage);

    // Lắng nghe sự kiện nhấn phím Enter trong trường nhập liệu
    $chatbotInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });
    // Hàm hiển thị nút phân tích và gắn sự kiện click
    const showAnalysisButton = () => {
        const analysisMessage = `<li class="is-ai">
                <div class="is-ai__profile-picture">
                    <svg class="icon-avatar" viewBox="0 0 32 32">
                        <use xlink: href="#avatar" />
                    </svg>
                </div>
                <span class='chatbot__arrow chatbot__arrow--left'></span>
                <div class='chatbot__message'>
                    <button class="btn btn-primary" style="color:black;" id="startAnalysis">Bắt đầu phân tích</button>
                </div>
            </li>`;
        $chatbotMessages.innerHTML += analysisMessage;
        scrollDown();

        document.getElementById("startAnalysis").addEventListener('click', () => {
            // Khi người dùng nhấn nút phân tích, thêm class active
            const startAnalysisButton = document.getElementById("startAnalysis");
            startAnalysisButton.classList.add("active"); // Thêm class active
            startAnalysisButton.style.display = "none";
            // Kiểm tra nếu người dùng nhấn nút phân tích
            const isAnalysisButton = startAnalysisButton.classList.contains("active");

            // Nếu là nút phân tích, gửi "Analysis", nếu không thì lấy dữ liệu từ input
            let userAnswers = isAnalysisButton ? "Analysis" : document.getElementById("chatbot__input").value.trim();

            console.log('userAnswers:', userAnswers);

            if (!userAnswers) {
                aiMessage("Câu trả lời không hợp lệ.");
                return;
            }

            // Hiển thị câu trả lời của người dùng (nếu không phải "Analysis")
            if (!isAnalysisButton) userMessage(userAnswers);

            resetInputField(); // Làm sạch trường nhập liệu
            scrollDown(); // Cuộn xuống cuối màn hình

            // Hàm gửi dữ liệu tới server

            // Chỉ gửi dữ liệu phân tích nếu đang nhấn nút phân tích
            if (isAnalysisButton) {
                sendAnswersToServer(userAnswers);
            } else {
                // Trường hợp người dùng gửi tin nhắn bình thường
                sendAnswersToServer(userAnswers);
            }
        });

    };
    const sendAnswersToServer = async (answers) => {
        const payload = { answers: answers }; // Bao gồm 'answers' trong payload
        showLoader(); // Hiển thị loader
        console.log('payload:', payload);
        // startAnalysisButton.disabled = true;
        $.ajax({
            url: '/Groups/GenerateContent',
            type: 'POST',
            contentType: 'application/json', // Đảm bảo gửi dữ liệu dưới dạng JSON
            data: JSON.stringify(payload), // Chuyển đổi payload thành JSON
            success: function (response) {
                if (response.success) {
                    console.log('response:', JSON.stringify(response.response));
                    setResponse(response.response || "Server đã nhận câu trả lời.");
                    // Xóa nút phân tích nếu cần (hoặc chỉ thay đổi trạng thái nút)
                    // startAnalysisButton.disabled = true;
                    enableInputField();
                } else {
                    aiMessage("Có lỗi xảy ra: " + (response.response || "Câu trả lời không hợp lệ."));
                    //  startAnalysisButton.disabled = false ;
                }
                removeLoader(); // Ẩn loader
            },
            error: function (xhr, status, error) {
                console.error("Lỗi gửi dữ liệu đến server:", error);
                aiMessage("Có lỗi xảy ra khi gửi câu trả lời. Vui lòng thử lại.");
                removeLoader(); // Ẩn loader
            }
        });
    };
    const setResponse = (val, delay = 0) => {
        console.log('setResponse:', val);
        setTimeout(() => {
            const responseHTML = processResponse(val);
            if (responseHTML) {
                aiMessage(responseHTML);
            } else {
                console.error('Không có dữ liệu để hiển thị.');
            }
        }, delay);
    };

    const processResponse = (val) => {
        console.log("val:", val); // Log toàn bộ phản hồi từ server

        let responseText = val;

        console.log("responseText:", responseText); // Log chi tiết phần dữ liệu cần xử lý

        // Khởi tạo markdown-it
        const md = window.markdownit();

        // Sử dụng markdown-it để chuyển đổi Markdown thành HTML
        responseText = md.render(responseText);

        // In ra để kiểm tra kết quả
        console.log('responseText', responseText);

        // Gói toàn bộ nội dung vào thẻ <div>
        return `<div>${responseText}</div>`;
    };










    const aiMessage = (content, isLoading = false, delay = 0) => {
        setTimeout(() => {
            removeLoader();
            let messageContent = content;
            $chatbotMessages.innerHTML += `<li class='is-ai animation' id='${isLoading ? "is-loading" : ""}'>
                    <div class="is-ai__profile-picture">
                        <svg class="icon-avatar" viewBox="0 0 32 32">
                            <use xlink: href="#avatar" />
                        </svg>
                    </div>
                    <span class='chatbot__arrow chatbot__arrow--left'></span>
                    <div class='chatbot__message'>${messageContent}</div>
                </li>`;
            scrollDown();
        }, delay);
    };

    const scrollDown = () => {
        const distanceToScroll = $chatbotMessageWindow.scrollHeight - (
            $chatbotMessages.lastChild.offsetHeight + 60);
        $chatbotMessageWindow.scrollTop = distanceToScroll;
    };

    const disableInputField = () => {
        $chatbotInput.disabled = true;
    };

    const enableInputField = () => {
        $chatbotInput.disabled = false;
    };

    const userMessage = content => {
        $chatbotMessages.innerHTML += `<li class='is-user animation'>
                <p class='chatbot__message'>${content}</p>
                <span class='chatbot__arrow chatbot__arrow--right'></span>
            </li>`;
    };

    const resetInputField = () => {
        $chatbotInput.value = '';
    };

</script>
@*
    <!-- Khu vực phân công nhiệm vụ -->
    <div class="card p-4 mb-4">
        <h5>Phân công nhiệm vụ cho các thành viên</h5>
        <form id="taskForm" class="row g-3">
            <div class="col-md-4">
                <label for="taskName" class="form-label">Tên công việc</label>
                <input type="text" class="form-control" id="taskName" placeholder="Ví dụ: Xây dựng giao diện" required>
            </div>
            <div class="col-md-4">
                <label for="assignee" class="form-label">Người phụ trách</label>
                <input type="text" class="form-control" id="assignee" placeholder="Ví dụ: Nguyễn Văn A" required>
            </div>
            <div class="col-md-2">
                <label for="taskDueDate" class="form-label">Hạn hoàn thành</label>
                <input type="date" class="form-control" id="taskDueDate" required>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="button" class="btn btn-success" onclick="addTask()">Thêm</button>
            </div>
        </form>
    </div>

    <!-- Khu vực danh sách nhiệm vụ -->
    <div class="card p-4 mb-4">
        <h5>Danh sách công việc</h5>
        <table class="table table-bordered text-center">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Tên công việc</th>
                    <th>Người phụ trách</th>
                    <th>Hạn hoàn thành</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody id="taskList"></tbody>
        </table>
    </div>
 *@