@model List<TaskModel>
<style>
    .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-10px); /* Di chuyển lên trên khi hover */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Thêm bóng mờ */
        }

    .no-results-message {
        padding: 10px;
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        margin-top: 20px;
        text-align: center;
    }
</style>
@if (TempData["Message"] != null)
{
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <!-- Toast container positioned at the top-right -->
        <div class="toast-container position-fixed top-10 end-0 p-2" style="z-index: 1050;">
            <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="7000">
                <div class="toast-header">
                    <i class="bi bi-bell-fill rounded me-2" style="color: yellow; font-size: 1.5rem;"></i>
                    <strong class="me-auto">Thông báo</strong>
                    <small class="text-muted">Vừa xong</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Đóng"></button>
                </div>
                <div class="toast-body" id="toastMessage">
                    @TempData["Message"]
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toastEl = document.querySelector('.toast');
            var toast = new bootstrap.Toast(toastEl);
            toast.show();
        });
    </script>
}
<div id="taskListContainer" class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12 d-flex justify-content-start">
            <button class="btn btn-outline-primary" id="searchButton">
                <i class="bi bi-filter"></i> Lọc
            </button>
        </div>
    </div>

    <!-- Khu vực Lọc (Dropdown) -->
    <div id="filterDropdown" class="d-none position-absolute mt-2 p-3 bg-light border rounded shadow" style="z-index: 100;">
        <!-- Form lọc -->
        <div class="d-flex flex-column">
            <!-- Tìm kiếm theo tên nhiệm vụ -->
            <input type="text" id="taskSearch" class="form-control mb-3" placeholder="Tìm theo tên nhiệm vụ..." oninput="filterTasks()">

            <!-- Lọc theo mức độ ưu tiên -->
            <select id="priorityFilter" class="form-control mb-3" onchange="filterTasks()">
                <option value="">Mức độ ưu tiên</option>
                <option value="Cao">Cao</option>
                <option value="Trung bình">Trung bình</option>
                <option value="Thấp">Thấp</option>
            </select>

            <button type="button" class="btn btn-primary w-100" onclick="applyFilters()">Áp dụng lọc</button>
        </div>
    </div>
    <div class="row" id="taskCardsContainer">
        @foreach (var task in Model)
        {
            <div class="col-md-4 mb-4" data-task-id="@task.TaskId" data-status="@task.Status" data-priority="@task.Priority">
                <form method="post" asp-action="GetDataIndex" asp-controller="Work">
                    <input type="hidden" name="TaskId" value="@task.TaskId" />
                    <input type="hidden" name="ProjectId" value="@task.ProjectId" />
                    <input type="hidden" name="AssignedToUserId" value="@task.AssignedToUserId" />
                    <input type="hidden" name="TaskName" value="@task.TaskName" />
                    <input type="hidden" name="ProjectName" value="@task.ProjectName" />
                    <input type="hidden" name="AssignedUserName" value="@task.AssignedUserName" />
                    <input type="hidden" name="Description" value="@task.Description" />
                    <input type="hidden" name="StartDate" value="@task.StartDate" />
                    <input type="hidden" name="EndDate" value="@task.EndDate" />
                    <input type="hidden" name="Status" value="@task.Status" />
                    <input type="hidden" name="SubmissionTypes" value="@String.Join(",", task.SubmissionTypes)" />


                    <input type="hidden" name="AttachmentPath" value="@task.AttachmentPath" />
                    <input type="hidden" name="Notes" value="@task.Notes" />
                    <input type="hidden" name="Priority" value="@task.Priority" />
                    <!-- Các input ẩn khác như trước -->
                    <div class="card shadow-sm rounded">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title">@task.TaskName</h5>
                        </div>
                        <div class="card-body">
                            <p><strong>Bắt đầu:</strong> <span class="badge bg-primary">@task.StartDate</span></p>
                            <p><strong>Kết thúc:</strong> <span class="badge bg-danger">@task.EndDate</span></p>
                            <p><strong>Trạng thái:</strong> <span class="badge bg-success">@task.Status</span></p>
                            <p><strong>Ưu tiên:</strong> @task.Priority</p>
                        </div>
                        <div class="card-footer text-center">
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-success w-50">Làm việc</button>
                                @if (!task.Status.Equals("Hoàn thành"))
                                {
                                    <button type="button" class="btn btn-danger w-100" data-bs-toggle="modal" data-bs-target="#confirmCancelModal" onclick="confirmCancelTask(@task.TaskId)">
                                        Hủy việc
                                    </button>
                                }
                              
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }
    </div>
</div>
    
  @*   <script>
    // Lấy các phần tử liên quan đến tìm kiếm và lọc
    const searchButton = document.getElementById('searchButton');
    const filterDropdown = document.getElementById('filterDropdown');

    // Hiển thị hoặc ẩn dropdown khi nhấn nút tìm kiếm
    searchButton.addEventListener('click', function () {
        filterDropdown.classList.toggle('d-none'); // Toggle visibility của dropdown
    });

    // Ẩn dropdown khi người dùng nhấn vào bất kỳ đâu ngoài khu vực tìm kiếm
    document.addEventListener('click', function (event) {
        if (!filterDropdown.contains(event.target) && event.target !== searchButton) {
            filterDropdown.classList.add('d-none');
        }
    });

    // Áp dụng bộ lọc và ẩn dropdown
    function applyFilters() {
        filterTasks();
        filterDropdown.classList.add('d-none'); // Ẩn dropdown sau khi lọc
    }

    // Hàm lọc nhiệm vụ
    function filterTasks() {
        const taskSearch = document.getElementById('taskSearch').value.toLowerCase();
        const priority = document.getElementById('priorityFilter').value;

        const taskCards = document.querySelectorAll('.task-card');
        let foundResults = false;

        taskCards.forEach(card => {
            const taskName = card.querySelector('.card-title').textContent.toLowerCase();
            const taskPriority = card.getAttribute('data-priority');

            // Kiểm tra các điều kiện lọc
            const isMatchingSearch = taskName.includes(taskSearch);
            const isMatchingPriority = priority ? taskPriority === priority : true;

            if (isMatchingSearch && isMatchingPriority) {
                card.style.display = 'block';
                foundResults = true; // Có kết quả
            } else {
                card.style.display = 'none';
            }
        });

        // Kiểm tra nếu không có kết quả
        const taskCardsContainer = document.getElementById('taskCardsContainer');
        let noResultsMessage = document.getElementById('noResultsMessage');

        if (!foundResults) {
            if (!noResultsMessage) {
                noResultsMessage = document.createElement('div');
                noResultsMessage.id = 'noResultsMessage';
                noResultsMessage.textContent = 'Không có kết quả';
                noResultsMessage.classList.add('alert', 'alert-info', 'text-center');
                taskCardsContainer.appendChild(noResultsMessage);
            }
        } else {
            // Nếu có kết quả, ẩn thông báo "Không có kết quả"
            if (noResultsMessage) {
                noResultsMessage.remove();
            }
        }

        // Nếu tất cả các trường tìm kiếm đều trống, hiển thị lại tất cả nhiệm vụ
        if (!taskSearch && !priority) {
            taskCards.forEach(card => {
                card.style.display = 'block'; // Hiển thị tất cả nhiệm vụ khi không có lọc
            });

            // Ẩn thông báo "Không có kết quả"
            if (noResultsMessage) {
                noResultsMessage.remove();
            }
        }
    }

</script> *@

    <script>
        function confirmCancelTask(taskId) {
        Swal.fire({
            title: 'Bạn có chắc chắn muốn hủy nhiệm vụ này?',
            text: "Hành động này sẽ xóa toàn bộ dữ liệu liên quan đến nhiệm vụ này.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Xác nhận hủy',
            cancelButtonText: 'Hủy'
        }).then((result) => {
            if (result.isConfirmed) {
                // Gửi AJAX POST yêu cầu hủy nhiệm vụ
                $.ajax({
                    type: 'POST',
                    url: '/Groups/CancelTask', // Đảm bảo URL này chính xác
                    data: { TaskId: taskId },
                    success: function(response) {
                        if (response.success) {
                            // Cập nhật lại danh sách nhiệm vụ trên giao diện
                            $('#taskListContainer').html(response.htmlContent);  // Cập nhật danh sách nhiệm vụ
                            Swal.fire('Hủy nhiệm vụ thành công!', '', 'success');
                        } else {
                            Swal.fire('Lỗi', response.message, 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Lỗi', 'Có lỗi xảy ra khi hủy nhiệm vụ.', 'error');
                    }
                });
            }
        });
    }

</script>
